import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { Search, Plus, TrendingUp, Calendar as CalendarIcon, Heart, Zap } from 'lucide-react'
import './Calendar.css'

const emotions = {
  HAPPY: { emoji: '😊', color: '#FFD93D', bg: 'bg-yellow-100' },
  SAD: { emoji: '😢', color: '#4FC3F7', bg: 'bg-blue-100' },
  ANGRY: { emoji: '😠', color: '#F44336', bg: 'bg-red-100' },
  PEACEFUL: { emoji: '😌', color: '#4CAF50', bg: 'bg-green-100' },
  ANXIOUS: { emoji: '😰', color: '#FF9800', bg: 'bg-orange-100' }
}

function Calendar() {
  const navigate = useNavigate()
  const [currentDate, setCurrentDate] = useState(new Date())
  const [diaryEntries, setDiaryEntries] = useState({})
  const [loading, setLoading] = useState(false)
  const [showTimeAlert, setShowTimeAlert] = useState(false)

  const today = new Date()
  const currentYear = currentDate.getFullYear()
  const currentMonth = currentDate.getMonth()

  // 달력 생성 로직
  const firstDay = new Date(currentYear, currentMonth, 1)
  const lastDay = new Date(currentYear, currentMonth + 1, 0)
  const startDate = new Date(firstDay)
  startDate.setDate(startDate.getDate() - firstDay.getDay())
  
  const calendarDays = []
  const totalCells = 42 // 6주 × 7일
  
  for (let i = 0; i < totalCells; i++) {
    const date = new Date(startDate)
    date.setDate(startDate.getDate() + i)
    calendarDays.push(date)
  }

  const formatDate = (date) => {
    return date.toISOString().split('T')[0]
  }

  const hasEntry = (date) => {
    const dateStr = formatDate(date)
    return diaryEntries[dateStr]
  }

  const canWriteToday = () => {
    const now = new Date()
    const currentHour = now.getHours()
    return currentHour >= 18 && currentHour < 24
  }

  const handleDateClick = (selectedDate) => {
    const dateStr = formatDate(selectedDate)
    const isToday = formatDate(today) === dateStr
    const canWrite = isToday && canWriteToday()
    
    if (hasEntry(selectedDate)) {
      navigate(`/diary/${dateStr}`)
    } else if (canWrite) {
      navigate(`/write/${dateStr}`)
    } else if (isToday) {
      setShowTimeAlert(true)
      setTimeout(() => setShowTimeAlert(false), 3000)
    }
  }

  const navigateMonth = (direction) => {
    setCurrentDate(new Date(currentYear, currentMonth + direction, 1))
  }

  // 통계 계산
  const calculateStats = () => {
    const entries = Object.values(diaryEntries)
    const thisMonthEntries = entries.filter(entry => {
      const entryDate = new Date(entry.date)
      return entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear
    })

    // 연속 작성 일수 계산
    let streak = 0
    const todayStr = formatDate(today)
    let checkDate = new Date(today)
    
    while (true) {
      const dateStr = formatDate(checkDate)
      if (diaryEntries[dateStr]) {
        streak++
        checkDate.setDate(checkDate.getDate() - 1)
      } else {
        break
      }
    }

    // 가장 많이 사용한 감정
    const emotionCounts = {}
    entries.forEach(entry => {
      emotionCounts[entry.emotion] = (emotionCounts[entry.emotion] || 0) + 1
    })
    const mostUsedEmotion = Object.keys(emotionCounts).reduce((a, b) => 
      emotionCounts[a] > emotionCounts[b] ? a : b, 'HAPPY')

    return {
      thisMonth: thisMonthEntries.length,
      streak,
      total: entries.length,
      mostUsedEmotion
    }
  }

  const stats = calculateStats()

  const monthNames = [
    '1월', '2월', '3월', '4월', '5월', '6월',
    '7월', '8월', '9월', '10월', '11월', '12월'
  ]

  const weekDays = ['일', '월', '화', '수', '목', '금', '토']

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 헤더 섹션 */}
      <div className="bg-white shadow-sm border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                  <CalendarIcon className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">마음일기</h1>
                  <p className="text-xs text-gray-500">오늘의 감정을 기록해보세요</p>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={() => navigate('/search')}
                className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <Search className="w-4 h-4 mr-2" />
                검색
              </button>
              
              {canWriteToday() && (
                <button
                  onClick={() => navigate(`/write/${formatDate(today)}`)}
                  className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all shadow-lg"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  오늘 일기 쓰기
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid lg:grid-cols-4 gap-8">
          {/* 메인 캘린더 영역 */}
          <div className="lg:col-span-3">
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
              {/* 캘린더 헤더 */}
              <div className="px-6 py-4 border-b border-gray-100 bg-gradient-to-r from-gray-50 to-white">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <h2 className="text-2xl font-bold text-gray-900">
                      {currentYear}년 {monthNames[currentMonth]}
                    </h2>
                    <div className="text-sm text-gray-500">
                      총 {stats.thisMonth}개의 일기
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => navigateMonth(-1)}
                      className="w-10 h-10 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
                    >
                      <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                      </svg>
                    </button>
                    
                    <button
                      onClick={() => setCurrentDate(new Date())}
                      className="px-3 py-2 text-sm font-medium text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                    >
                      오늘
                    </button>
                    
                    <button
                      onClick={() => navigateMonth(1)}
                      className="w-10 h-10 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
                    >
                      <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>

              {/* 요일 헤더 */}
              <div className="grid grid-cols-7 border-b border-gray-100 bg-gray-50">
                {weekDays.map((day, index) => (
                  <div key={day} className="py-3 text-center">
                    <span className={`text-sm font-semibold ${
                      index === 0 ? 'text-red-500' : index === 6 ? 'text-blue-500' : 'text-gray-700'
                    }`}>
                      {day}
                    </span>
                  </div>
                ))}
              </div>

              {/* 캘린더 그리드 */}
              <div className="grid grid-cols-7">
                {calendarDays.map((date, index) => {
                  const isCurrentMonth = date.getMonth() === currentMonth
                  const isToday = formatDate(date) === formatDate(today)
                  const entry = hasEntry(date)
                  const isWeekend = date.getDay() === 0 || date.getDay() === 6
                  
                  return (
                    <div
                      key={index}
                      onClick={() => isCurrentMonth && handleDateClick(date)}
                      className={`relative h-20 border-r border-b border-gray-100 ${
                        isCurrentMonth ? 'cursor-pointer hover:bg-gray-50' : 'bg-gray-25'
                      } transition-colors duration-150`}
                    >
                      {/* 날짜 */}
                      <div className="p-2">
                        <span className={`text-sm font-medium ${
                          !isCurrentMonth ? 'text-gray-300' :
                          isToday ? 'text-white bg-blue-500 w-7 h-7 rounded-full flex items-center justify-center' :
                          isWeekend ? (date.getDay() === 0 ? 'text-red-500' : 'text-blue-500') :
                          'text-gray-700'
                        }`}>
                          {date.getDate()}
                        </span>
                      </div>

                      {/* 일기 표시 */}
                      {entry && isCurrentMonth && (
                        <div className="absolute bottom-2 left-2 right-2">
                          <div 
                            className={`w-full h-1.5 rounded-full ${emotions[entry.emotion]?.bg || 'bg-gray-200'}`}
                            style={{ backgroundColor: emotions[entry.emotion]?.color }}
                          />
                          <div className="text-xs text-center mt-1">
                            {emotions[entry.emotion]?.emoji}
                          </div>
                        </div>
                      )}

                      {/* 오늘 작성 가능 표시 */}
                      {isToday && !entry && canWriteToday() && (
                        <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2">
                          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
            </div>

            {/* 시간 제한 알림 */}
            {showTimeAlert && (
              <div className="mt-4 p-4 bg-amber-50 border border-amber-200 rounded-xl">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-amber-100 rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-amber-800">일기 작성 시간이 아닙니다</p>
                    <p className="text-xs text-amber-600">일기는 매일 오후 6시부터 자정까지만 작성할 수 있습니다.</p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* 사이드바 - 통계 */}
          <div className="space-y-6">
            {/* 통계 카드들 */}
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">이달의 기록</h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between p-3 bg-blue-50 rounded-xl">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <CalendarIcon className="w-5 h-5 text-blue-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">이달 일기</p>
                      <p className="text-xs text-gray-500">작성한 일기 수</p>
                    </div>
                  </div>
                  <span className="text-xl font-bold text-blue-600">{stats.thisMonth}</span>
                </div>

                <div className="flex items-center justify-between p-3 bg-green-50 rounded-xl">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                      <TrendingUp className="w-5 h-5 text-green-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">연속 기록</p>
                      <p className="text-xs text-gray-500">연속 작성 일수</p>
                    </div>
                  </div>
                  <span className="text-xl font-bold text-green-600">{stats.streak}일</span>
                </div>

                <div className="flex items-center justify-between p-3 bg-purple-50 rounded-xl">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                      <Heart className="w-5 h-5 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">주요 감정</p>
                      <p className="text-xs text-gray-500">가장 많은 감정</p>
                    </div>
                  </div>
                  <span className="text-2xl">{emotions[stats.mostUsedEmotion]?.emoji}</span>
                </div>

                <div className="flex items-center justify-between p-3 bg-amber-50 rounded-xl">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center">
                      <Zap className="w-5 h-5 text-amber-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">전체 기록</p>
                      <p className="text-xs text-gray-500">총 일기 수</p>
                    </div>
                  </div>
                  <span className="text-xl font-bold text-amber-600">{stats.total}</span>
                </div>
              </div>
            </div>

            {/* 빠른 액션 */}
            <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-100">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">빠른 액션</h3>
              
              <div className="space-y-3">
                <button
                  onClick={() => navigate('/search')}
                  className="w-full flex items-center justify-center space-x-2 p-3 bg-white border border-gray-200 rounded-xl hover:bg-gray-50 transition-colors"
                >
                  <Search className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">일기 검색</span>
                </button>
                
                {canWriteToday() && (
                  <button
                    onClick={() => navigate(`/write/${formatDate(today)}`)}
                    className="w-full flex items-center justify-center space-x-2 p-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all shadow-lg"
                  >
                    <Plus className="w-4 h-4" />
                    <span className="text-sm font-medium">오늘 일기 작성</span>
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Calendar
